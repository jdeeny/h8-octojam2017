# Chip8 is a virtual machine designed in 1977 for programming video games.
# Octo is a high level assembler, disassembler and simulator for Chip8.
# Click 'Run' and then press ASWD to move the sprite around the screen.
# Click the Octo logo for source, documentation and examples.

:const KB_1 0x1
:const KB_2 0x2
:const KB_3 0x3
:const KB_4 0xC
:const KB_Q 0x4
:const KB_W 0x5
:const KB_E 0x6
:const KB_R 0xD
:const KB_A 0x7
:const KB_S 0x8
:const KB_D 0x9
:const KB_F 0xE
:const KB_Z 0xA
:const KB_X 0x0
:const KB_C 0xB
:const KB_V 0xF

:calc KEY_LEFT { KB_A }
:calc KEY_RIGHT { KB_D }
:calc KEY_UP { KB_W }
:calc KEY_DOWN { KB_S }

# This could be switch instead of a dedicated key for each
:calc KEY_LH { KB_Q }
:calc KEY_RH { KB_E }
:calc KEY_LF { KB_Z }
:calc KEY_RF { KB_C }


:calc MOVE_SPEED { 2 }
:calc MOVE_SPEED_REVERSE { 0 - MOVE_SPEED }

:const FRAME_DELAY 2


# Positions stored here
:alias lhx v3
:alias lhy v4
:alias rhx v5
:alias rhy v6
:alias lfx v7
:alias lfy v8
:alias rfx v9
:alias rfy vA


:alias xtemp vB
:alias ytemp vC

:alias limb vD # Which limb are we controlling?
:const LIMB_LEFTHAND 0
:const LIMB_RIGHTHAND 1


:const LEFT_HAND_LIMIT 16
:const RIGHT_HAND_LIMIT 96
:const TOP_HAND_LIMIT 0
:const BOT_HAND_LIMIT 48


:macro draw label x y h { i := label sprite x y h }
:macro ifkey keynum { vF := keynum if vF key then }

: draw_left_handarm
	draw left_hand lhx lhy 0
	i := arm
	v0 := lhy
	vF := 0b01110000
	vF &= lhy
	if vF == 0 then jump draw_left_handarm_3
	if vF == 16 then jump draw_left_handarm_2
	if vF == 32 then jump draw_left_handarm_1
	return
	: draw_left_handarm_3
	v0 += 16
	sprite lhx v0 0
	: draw_left_handarm_2
	v0 += 16
	sprite lhx v0 0
	: draw_left_handarm_1
	v0 += 16
	sprite lhx v0 0
	;

: draw_right_handarm
	draw right_hand rhx rhy 0
	i := arm
	v0 := rhy
	vF := 0b01110000
	vF &= rhy
	if vF == 0 then jump draw_right_handarm_3
	if vF == 16 then jump draw_right_handarm_2
	if vF == 32 then jump draw_right_handarm_1
	return
	: draw_right_handarm_3
	v0 += 16
	sprite rhx v0 0
	: draw_right_handarm_2
	v0 += 16
	sprite rhx v0 0
	: draw_right_handarm_1
	v0 += 16
	sprite rhx v0 0
	;

# TODO: Fix these, they act just like arms not legs!
: draw_left_footleg
	draw left_foot lfx lfy 0
	i := leg
	v0 := lfy
	vF := 0b01110000
	vF &= lfy
	if vF == 0 then jump draw_left_footleg_1
	if vF == 16 then jump draw_left_footleg_2
	if vF == 32 then jump draw_left_footleg_3
	return
	: draw_left_footleg_3
	v0 += 16
	sprite lfx v0 0
	: draw_left_footleg_2
	v0 += 16
	sprite lfx v0 0
	: draw_left_footleg_1
	v0 += 16
	sprite lfx v0 0
	;

: draw_right_footleg
	draw right_foot rfx rfy 0
	i := leg
	v0 := rfy
	vF := 0b01110000
	vF &= rfy
	if vF == 0 then jump draw_right_footleg_1
	if vF == 16 then jump draw_right_footleg_2
	if vF == 32 then jump draw_right_footleg_3
	return
	: draw_right_footleg_3
	v0 += 16
	sprite rfx v0 0
	: draw_right_footleg_2
	v0 += 16
	sprite rfx v0 0
	: draw_right_footleg_1
	v0 += 16
	sprite rfx v0 0
	;


:macro update_lefthand {
	draw_left_handarm
	lhx += xtemp
	lhy += ytemp
	vF := LEFT_HAND_LIMIT
	vF -= lhx
	if vF != 0 then lhx := LEFT_HAND_LIMIT
	vF := RIGHT_HAND_LIMIT
	vF -= lhx
	if vF == 0 then lhx := RIGHT_HAND_LIMIT
	vF := 64
	vF -= lhy
	if vF == 0 then lhy := TOP_HAND_LIMIT
	vF := BOT_HAND_LIMIT
	vF -= lhy
	if vF == 0 then lhy := BOT_HAND_LIMIT

	draw_left_handarm
	xtemp := 0
	ytemp := 0
}

:macro update_righthand {
	draw_right_handarm
	rhx += xtemp
	rhy += ytemp
	vF := LEFT_HAND_LIMIT
	vF -= rhx
	if vF != 0 then rhx := LEFT_HAND_LIMIT
	vF := RIGHT_HAND_LIMIT
	vF -= rhx
	if vF == 0 then rhx := RIGHT_HAND_LIMIT
	vF := 64
	vF -= rhy
	if vF == 0 then rhy := TOP_HAND_LIMIT
	vF := BOT_HAND_LIMIT
	vF -= rhy
	if vF == 0 then rhy := BOT_HAND_LIMIT

	draw_right_handarm
	xtemp := 0
	ytemp := 0
}

: main
	hires
	title_draw
	vF := key
	clear

	lhx := 20
	lhy := 58
	rhx := 100
	rhy := 58

	xtemp := 0
	ytemp := 0

	draw_left_handarm
	draw_right_handarm

	: main_loop
	loop

		if limb == LIMB_LEFTHAND then jump lefthand
		: righthand
			update_righthand
			jump switchlimbs

		: lefthand
			update_lefthand

		: switchlimbs
			ifkey KEY_LH limb := LIMB_LEFTHAND
			ifkey KEY_RH limb := LIMB_RIGHTHAND
			ifkey KEY_LEFT xtemp += MOVE_SPEED_REVERSE
			ifkey KEY_RIGHT xtemp += MOVE_SPEED
			ifkey KEY_UP ytemp += MOVE_SPEED_REVERSE
			ifkey KEY_DOWN ytemp += MOVE_SPEED

			v0 := random 0b00001100
			vF := random 0b00000001
			jump0 randtable
			: randtable
			xtemp += vF
			jump endrand
			xtemp -= vF
			jump endrand
			ytemp += vF
			jump endrand
			ytemp -= vF
			: endrand

		: delay_loop
		# lock the framerate of this program via the delay timer:
		loop
			vf := delay
			if vf != 0 then
		again
		vf := FRAME_DELAY
		delay := vf
	again




: right_hand
0x01 0x40 0x06 0xA0 0x02 0xA8 0x0A 0xA8
0x0B 0xF8 0x0F 0xF0 0x0F 0xF0 0x07 0xE0
0x03 0xC0 0x03 0xC0 0x03 0xC0 0x03 0xC0
0x03 0xC0 0x03 0xC0 0x03 0xC0 0x03 0xC0

: left_hand
0x02 0x80 0x05 0x60 0x15 0x40 0x15 0x50
0x1F 0xD0 0x0F 0xF0 0x0F 0xF0 0x07 0xE0
0x03 0xC0 0x03 0xC0 0x03 0xC0 0x03 0xC0
0x03 0xC0 0x03 0xC0 0x03 0xC0 0x03 0xC0

: arm
0x03 0xC0 0x03 0xC0 0x03 0xC0 0x03 0xC0
0x03 0xC0 0x03 0xC0 0x03 0xC0 0x03 0xC0
0x03 0xC0 0x03 0xC0 0x03 0xC0 0x03 0xC0
0x03 0xC0 0x03 0xC0 0x03 0xC0 0x03 0xC0

: right_foot
0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0
0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0
0x07 0xE0 0x07 0xE0 0x07 0xE0 0x03 0xE0
0x03 0xC0 0x07 0xFC 0x07 0xFE 0x03 0xFE

: left_foot
0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0
0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0
0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xC0
0x03 0xC0 0x3F 0xE0 0x7F 0xE0 0x7F 0xC0

: leg
0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0
0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0
0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0
0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0

# Some holds, these are 3 tall ellipses
: hold_3x3 0x40 0xA0 0x40
: hold_3x4 0x60 0x90 0x60
: hold_3x5 0x70 0x88 0x70
: hold_3x6 0x78 0x84 0x78
: hold_3x7 0x7C 0x82 0x7C
: hold_3x8 0x7E 0x81 0x7E


####################
### Title Screen ###
####################
:const TITLE_CHAR_WIDTH 16

:const TITLE_H8_YOFFSET 17
:const TITLE_H8_SPACING 6
:calc TITLE_H8_XSKIP { TITLE_H8_SPACING + 16 }
:calc TITLE_H8_XOFFSET { 64 - ( ( TITLE_CHAR_WIDTH + TITLE_H8_XSKIP ) / 2 ) }

:calc TITLE_LH_XOFFSET { TITLE_H8_XOFFSET / 3 }
:calc TITLE_LH_YOFFSET { 64 - 6 }
:calc TITLE_RH_XOFFSET { TITLE_H8_XOFFSET + 19 }
:calc TITLE_RH_YOFFSET { TITLE_H8_YOFFSET + 27 }


:const TITLE_SUB_WIDTH 8
:const TITLE_SUB_HEIGHT 5
:const TITLE_SUB_TILES 10
:calc TITLE_SUB_TOTAL_WIDTH { ( TITLE_SUB_WIDTH * TITLE_SUB_TILES ) - 3 } # Subtract for empty cols at end
:calc TITLE_SUB_XOFFSET { 64 - ( TITLE_SUB_TOTAL_WIDTH / 2 ) }
:calc TITLE_SUB_YOFFSET { TITLE_H8_YOFFSET - 10 }
:calc TITLE_SUB_XEND { TITLE_SUB_XOFFSET + ( TITLE_SUB_WIDTH * TITLE_SUB_TILES ) }

: title_draw
	clear
	v0 := TITLE_H8_XOFFSET
	v1 := TITLE_H8_YOFFSET
	draw title_htop v0 v1 0
	v1 += 16
	draw title_hbot v0 v1 0
	v0 += TITLE_H8_XSKIP
	draw title_8bot v0 v1 0
	v1 += -16
	draw title_8top v0 v1 0
	lhx := TITLE_LH_XOFFSET
	lhy := TITLE_LH_YOFFSET
	draw_left_handarm
	rhx := TITLE_RH_XOFFSET
	rhy := TITLE_RH_YOFFSET
	draw_right_handarm


	v1 := TITLE_SUB_XOFFSET
	v2 := TITLE_SUB_YOFFSET
	v0 := TITLE_SUB_HEIGHT
	i := title_sub_be
	loop
		sprite v1 v2 TITLE_SUB_HEIGHT
		v1 += TITLE_SUB_WIDTH
		i += v0
		while v1 != TITLE_SUB_XEND
	again
	;

: title_htop
0x00 0x00 0x60 0x06 0xF0 0x0F 0xF0 0x0F
0xF0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0 0x0F
0xF0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0 0x0F
0xF0 0x0F 0xF0 0x0F 0xFF 0xFF 0xFF 0xFF

: title_hbot
0xFF 0xFF 0xFF 0xFF 0xF0 0x0F 0xF0 0x0F
0xF0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0 0x0F
0xF0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0 0x0F
0xF0 0x0F 0xF0 0x0F 0xF0 0x0F 0x60 0x06

: title_8top
0x30 0x0C 0x78 0x1E 0x78 0x1E 0x30 0x0C
0x07 0xE0 0x1F 0xF8 0x3F 0xFC 0x7F 0xFE
0x7C 0x3E 0xF8 0x1F 0xF0 0x0F 0xF0 0x0F
0xF0 0x0F 0xF0 0x0F 0xF8 0x1F 0x7C 0x3E


: title_8bot
0x3F 0xFC 0x1F 0xF8 0x1F 0xF8 0x3F 0xFC
0x7C 0x3E 0xF8 0x1F 0xF0 0x0F 0xF0 0x0F
0xF0 0x0F 0xF0 0x0F 0xF8 0x1F 0x7C 0x3E
0x7F 0xFE 0x3F 0xFC 0x1F 0xF8 0x07 0xE0


# H8 - Bergsteigersimulator
: title_sub_be	0xCE 0xA8 0xCC 0xA8 0xCE # BE
: title_sub_rg	0xCE 0xA8 0xCA 0xAA 0xAE # RG
: title_sub_st 	0xEE 0x84 0xE4 0x24 0xE4 # ST
: title_sub_ei 	0xEB 0x8A 0xCA 0x8A 0xEB # EI 1/2 G
: title_sub_ge 	0xBB 0x22 0xB3 0xA2 0xBA # GE 2 col R
: title_sub_rsi 0xBA 0xA2 0x3A 0x8A 0xBA # 1 col R,SI
: title_sub_m 	0x8A 0xDA 0xAA 0x8A 0x8B # M 1/2 U
: title_sub_ula 0xA1 0xA2 0xA3 0xA2 0xBA # 1/2 u L 1/2A
: title_sub_TO	0x3B 0x92 0x92 0x92 0x93 # 1/2 A, T, 1/2 O
: title_sub_R 	0xB8 0xA8 0xB0 0xA8 0xA8 # 1/2 O, R



### End Title Screen
